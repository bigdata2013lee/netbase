export PYTHONPATH=/opt/netbase4
export LC_ALL="C"
export LANG=zh_EN.UTF-8

VARDIR=$NBHOME/bin/netpid
SYS=`uname`
PS="ps -eo pid"
CMD=$1
shift

pidFile() {
   if [ "$PRGNAME" = "redis-server" ]; then
       PIDFILE="$VARDIR/`basename $PRGNAME`.pid"
   else
       PIDFILE="$VARDIR/`basename $PRGNAME .pyc`.pid"
   fi
   echo "$PIDFILE"
}

running() {
    PIDFILE=`pidFile $CFGFILE`
    if [ -f $PIDFILE ]; then
        PID=`cat $PIDFILE 2>/dev/null`
	kill -0 $PID 2>/dev/null || $PS | grep -q "^ *$PID$"
	return $?
    fi
    return 1
}

start() {
    PIDFILE=`pidFile $CFGFILE`
    if running; then    
        echo is already running
    else
        echo starting...
        if [ "$CFGFILE" = "" ]; then
            exec $NBHOME/bin/python $PRGHOME/$PRGNAME --daemon "$@"
        else
            exec $PRGHOME/$PRGNAME $CFGFILE --daemonize yes --logfile $NBHOME/log/redis.log "$@"
        fi
    fi
}

run() {
    if [ "$CFGFILE" = "" ]; then
        exec $NBHOME/bin/python $PRGHOME/$PRGNAME "$@"
    else
        exec $PRGHOME/$PRGNAME $CFGFILE "$@"
    fi
}

stop() {
    PIDFILE=`pidFile $CFGFILE`
    KILLED=1
    echo stopping...
    if running; then
        # kill the daemon
        PID=`cat $PIDFILE 2>/dev/null`
	if [ x"$PID" != x ] ; then
	    kill -TERM $PID
	    if [ $? -gt 0 ]; then
		rm -f $PIDFILE
		echo clearing pid file
	    fi
        fi
    else
        if [ "$KILLED" -ne 0 ] ; then
	   echo already stopped
        fi
    fi
    dbfile=/data/db/mongod.lock
    if [ "$PRGNAME" = "mongod" ] ; then
    	if [ -f "$dbfile" ] ; then
    	    rm -f  $dbfile 
    	fi
    fi
    
     
}

restart() {
    PIDFILE=`pidFile $CFGFILE`
    stop
    for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
    do
       sleep 0.24 2>/dev/null || sleep 1
       test -f $PIDFILE || break
    done
    start "$@"
}

status() {
    PIDFILE=`pidFile $CFGFILE`
    if running; then
            echo program running\; pid=$PID
            exit 0
    else
        echo not running
        if [ -f $PIDFILE ]; then
            rm -f $PIDFILE
            exit 1
        else
            exit 3
        fi
    fi
}

help() {
    exec $PYTHON $PRGHOME/$PRGNAME -h
}

debug() {
    PIDFILE=`pidFile $CFGFILE`
    if [ -f $PIDFILE ]; then
        PID=`cat $PIDFILE 2>/dev/null`
        echo "Sending SIGUSR1 to $PID"
        kill -s USR1 $PID 2>/dev/null || $PS | grep -q "^ *$PID$"
        return $?
    else
        echo "Unable to find process to send SIGUSR1 signal"
    fi

}

stats() {
    PIDFILE=`pidFile $CFGFILE`
    if [ -f $PIDFILE ]; then
        PID=`cat $PIDFILE 2>/dev/null`
        echo "Sending SIGUSR2 to $PID"
        kill -s USR2 $PID 2>/dev/null || $PS | grep -q "^ *$PID$"
        return $?
    else
        echo "Unable to find process to send SIGUSR2 signal"
    fi

}

generic() {
    case "$CMD" in
      run)
	    run "$@"
	    ;;
      start)
	    start "$@"
	    ;;
      stop)
	    stop
	    ;;
      restart)
	    restart "$@"
	    ;;
      status)
	    status
	    ;;
      help)
	    help
	    ;;
      genconf)
	    genconf
	    ;;
      genxmlconfigs)
	    genxmlconfigs
	    ;;
      debug)
	    debug "$@"
	    ;;
      stats)
            stats "$@"
            ;;
      *)
	    cat - <<HELP
Usage: $0 {run|start|stop|restart|status|help|debug|stats} [options]

  where the commands are:

    run     - start the program but don't put it in the background.
              NB: This mode is good for debugging.

    start   - start the program in daemon mode -- running in the background,
              detached from the shell

    stop    - stop the program

    restart - stop and then start the program
              NB: Sometimes the start command will run before the daemon
                  has terminated.  If this happens just re-run the command.

    status  - Check the status of a daemon.  This will print the current
              process nuber if it is running.

    help    - display the options available for the daemon

    debug   - toggle the logging of daemons between Debug level and the default

    stats   - display detailed statistics of the deamon

HELP
	    exit 1
    esac
    exit $?
}

notdaemon() {
    case "$CMD" in
      run)
	    run "$@"
	    ;;
      start)
	    run "$@"
	    ;;
      help)
	    help
	    ;;
      *)
	    echo $"Usage: $0 {run|help}"
	    exit 1
    esac
    exit $?
}

